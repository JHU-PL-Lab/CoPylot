@   0: let preamble$0 = {};
@   1: let &scope = alloc;
@   2: store &scope preamble$0;
@   3: let get_from_scope = def (preamble$1) {
    @   4: let preamble$2 = get &scope;
    @   5: let preamble$3 = preamble$2 haskey preamble$1;
    @   6: let &preamble$4 = if preamble$3 then {
        @   9: let &preamble$5 = preamble$2{preamble$1};
        @  10: ifresult &preamble$5;

    } else {
        @   7: let &preamble$6 = get_from_parent_scope(preamble$1);
        @   8: ifresult &preamble$6;

    };
    @  11: return &preamble$4;

};
@  12: let get_from_parent_scope = def (preamble$7) {
    @  13: let preamble$8 = "name is not defined";
    @  14: let &preamble$9 = alloc;
    @  15: store &preamble$9 preamble$8;
    @  16: let preamble$10 = "*value";
    @  17: let preamble$11 = {};
    @  18: let preamble$12 = preamble$11{preamble$10 -> &preamble$9};
    @  19: let &preamble$13 = alloc;
    @  20: store &preamble$13 preamble$12;
    @  21: raise &preamble$13;

};
@  22: let &preamble$15 = alloc;
@  23: let preamble$14 = 1;
@  24: store &preamble$15 preamble$14;
@  25: let preamble$16 = {};
@  26: let preamble$17 = "*value";
@  27: let preamble$18 = preamble$16{preamble$17 -> &preamble$15};
@  28: let &True = alloc;
@  29: store &True preamble$18;
@  30: let &preamble$20 = alloc;
@  31: let preamble$19 = 0;
@  32: store &preamble$20 preamble$19;
@  33: let preamble$21 = {};
@  34: let preamble$22 = "*value";
@  35: let preamble$23 = preamble$21{preamble$22 -> &preamble$20};
@  36: let &False = alloc;
@  37: store &False preamble$23;
@  38: let &preamble$25 = alloc;
@  39: let preamble$24 = None;
@  40: store &preamble$25 preamble$24;
@  41: let preamble$26 = {};
@  42: let preamble$27 = "*value";
@  43: let preamble$28 = preamble$26{preamble$27 -> &preamble$25};
@  44: let &None = alloc;
@  45: store &None preamble$28;
@  46: let preamble$49 = def (preamble$29) {
    @  47: let preamble$30 = 0;
    @  48: let &preamble$31 = preamble$29[preamble$30];
    @  49: let preamble$32 = get &preamble$31;
    @  50: let preamble$33 = "*value";
    @  51: let preamble$34 = preamble$32 haskey preamble$33;
    @  52: let &preamble$35 = if preamble$34 then {
        @  62: let &preamble$36 = preamble$32{preamble$33};
        @  63: ifresult &preamble$36;

    } else {
        @  53: let preamble$37 = "Object has no attribute *value";
        @  54: let &preamble$38 = alloc;
        @  55: store &preamble$38 preamble$37;
        @  56: let preamble$39 = "*value";
        @  57: let preamble$40 = {};
        @  58: let preamble$41 = preamble$40{preamble$39 -> &preamble$38};
        @  59: let &preamble$42 = alloc;
        @  60: store &preamble$42 preamble$41;
        @  61: raise &preamble$42;

    };
    @  64: let preamble$43 = get &preamble$35;
    @  65: let &preamble$44 = alloc;
    @  66: store &preamble$44 preamble$43;
    @  67: let preamble$45 = "*value";
    @  68: let preamble$46 = {};
    @  69: let preamble$47 = preamble$46{preamble$45 -> &preamble$44};
    @  70: let &preamble$48 = alloc;
    @  71: store &preamble$48 preamble$47;

};
@  72: let &preamble$50 = alloc;
@  73: store &preamble$50 preamble$49;
@  74: let preamble$51 = "*value";
@  75: let preamble$52 = {};
@  76: let preamble$53 = preamble$52{preamble$51 -> &preamble$50};
@  77: let &preamble$54 = alloc;
@  78: store &preamble$54 preamble$53;
@  79: let &AttributeError = &preamble$54;
@  80: let preamble$75 = def (preamble$55) {
    @  81: let preamble$56 = 0;
    @  82: let &preamble$57 = preamble$55[preamble$56];
    @  83: let preamble$58 = get &preamble$57;
    @  84: let preamble$59 = "*value";
    @  85: let preamble$60 = preamble$58 haskey preamble$59;
    @  86: let &preamble$61 = if preamble$60 then {
        @  96: let &preamble$62 = preamble$58{preamble$59};
        @  97: ifresult &preamble$62;

    } else {
        @  87: let preamble$63 = "Object has no attribute *value";
        @  88: let &preamble$64 = alloc;
        @  89: store &preamble$64 preamble$63;
        @  90: let preamble$65 = "*value";
        @  91: let preamble$66 = {};
        @  92: let preamble$67 = preamble$66{preamble$65 -> &preamble$64};
        @  93: let &preamble$68 = alloc;
        @  94: store &preamble$68 preamble$67;
        @  95: raise &preamble$68;

    };
    @  98: let preamble$69 = get &preamble$61;
    @  99: let &preamble$70 = alloc;
    @ 100: store &preamble$70 preamble$69;
    @ 101: let preamble$71 = "*value";
    @ 102: let preamble$72 = {};
    @ 103: let preamble$73 = preamble$72{preamble$71 -> &preamble$70};
    @ 104: let &preamble$74 = alloc;
    @ 105: store &preamble$74 preamble$73;

};
@ 106: let &preamble$76 = alloc;
@ 107: store &preamble$76 preamble$75;
@ 108: let preamble$77 = "*value";
@ 109: let preamble$78 = {};
@ 110: let preamble$79 = preamble$78{preamble$77 -> &preamble$76};
@ 111: let &preamble$80 = alloc;
@ 112: store &preamble$80 preamble$79;
@ 113: let &TypeError = &preamble$80;
@ 114: let preamble$101 = def (preamble$81) {
    @ 115: let preamble$82 = 0;
    @ 116: let &preamble$83 = preamble$81[preamble$82];
    @ 117: let preamble$84 = get &preamble$83;
    @ 118: let preamble$85 = "*value";
    @ 119: let preamble$86 = preamble$84 haskey preamble$85;
    @ 120: let &preamble$87 = if preamble$86 then {
        @ 130: let &preamble$88 = preamble$84{preamble$85};
        @ 131: ifresult &preamble$88;

    } else {
        @ 121: let preamble$89 = "Object has no attribute *value";
        @ 122: let &preamble$90 = alloc;
        @ 123: store &preamble$90 preamble$89;
        @ 124: let preamble$91 = "*value";
        @ 125: let preamble$92 = {};
        @ 126: let preamble$93 = preamble$92{preamble$91 -> &preamble$90};
        @ 127: let &preamble$94 = alloc;
        @ 128: store &preamble$94 preamble$93;
        @ 129: raise &preamble$94;

    };
    @ 132: let preamble$95 = get &preamble$87;
    @ 133: let &preamble$96 = alloc;
    @ 134: store &preamble$96 preamble$95;
    @ 135: let preamble$97 = "*value";
    @ 136: let preamble$98 = {};
    @ 137: let preamble$99 = preamble$98{preamble$97 -> &preamble$96};
    @ 138: let &preamble$100 = alloc;
    @ 139: store &preamble$100 preamble$99;

};
@ 140: let &preamble$102 = alloc;
@ 141: store &preamble$102 preamble$101;
@ 142: let preamble$103 = "*value";
@ 143: let preamble$104 = {};
@ 144: let preamble$105 = preamble$104{preamble$103 -> &preamble$102};
@ 145: let &preamble$106 = alloc;
@ 146: store &preamble$106 preamble$105;
@ 147: let &NameError = &preamble$106;
@ 148: let preamble$127 = def (preamble$107) {
    @ 149: let preamble$108 = 0;
    @ 150: let &preamble$109 = preamble$107[preamble$108];
    @ 151: let preamble$110 = get &preamble$109;
    @ 152: let preamble$111 = "*value";
    @ 153: let preamble$112 = preamble$110 haskey preamble$111;
    @ 154: let &preamble$113 = if preamble$112 then {
        @ 164: let &preamble$114 = preamble$110{preamble$111};
        @ 165: ifresult &preamble$114;

    } else {
        @ 155: let preamble$115 = "Object has no attribute *value";
        @ 156: let &preamble$116 = alloc;
        @ 157: store &preamble$116 preamble$115;
        @ 158: let preamble$117 = "*value";
        @ 159: let preamble$118 = {};
        @ 160: let preamble$119 = preamble$118{preamble$117 -> &preamble$116};
        @ 161: let &preamble$120 = alloc;
        @ 162: store &preamble$120 preamble$119;
        @ 163: raise &preamble$120;

    };
    @ 166: let preamble$121 = get &preamble$113;
    @ 167: let &preamble$122 = alloc;
    @ 168: store &preamble$122 preamble$121;
    @ 169: let preamble$123 = "*value";
    @ 170: let preamble$124 = {};
    @ 171: let preamble$125 = preamble$124{preamble$123 -> &preamble$122};
    @ 172: let &preamble$126 = alloc;
    @ 173: store &preamble$126 preamble$125;

};
@ 174: let &preamble$128 = alloc;
@ 175: store &preamble$128 preamble$127;
@ 176: let preamble$129 = "*value";
@ 177: let preamble$130 = {};
@ 178: let preamble$131 = preamble$130{preamble$129 -> &preamble$128};
@ 179: let &preamble$132 = alloc;
@ 180: store &preamble$132 preamble$131;
@ 181: let &ValueError = &preamble$132;
@ 182: let preamble$153 = def (preamble$133) {
    @ 183: let preamble$134 = 0;
    @ 184: let &preamble$135 = preamble$133[preamble$134];
    @ 185: let preamble$136 = get &preamble$135;
    @ 186: let preamble$137 = "*value";
    @ 187: let preamble$138 = preamble$136 haskey preamble$137;
    @ 188: let &preamble$139 = if preamble$138 then {
        @ 198: let &preamble$140 = preamble$136{preamble$137};
        @ 199: ifresult &preamble$140;

    } else {
        @ 189: let preamble$141 = "Object has no attribute *value";
        @ 190: let &preamble$142 = alloc;
        @ 191: store &preamble$142 preamble$141;
        @ 192: let preamble$143 = "*value";
        @ 193: let preamble$144 = {};
        @ 194: let preamble$145 = preamble$144{preamble$143 -> &preamble$142};
        @ 195: let &preamble$146 = alloc;
        @ 196: store &preamble$146 preamble$145;
        @ 197: raise &preamble$146;

    };
    @ 200: let preamble$147 = get &preamble$139;
    @ 201: let &preamble$148 = alloc;
    @ 202: store &preamble$148 preamble$147;
    @ 203: let preamble$149 = "*value";
    @ 204: let preamble$150 = {};
    @ 205: let preamble$151 = preamble$150{preamble$149 -> &preamble$148};
    @ 206: let &preamble$152 = alloc;
    @ 207: store &preamble$152 preamble$151;

};
@ 208: let &preamble$154 = alloc;
@ 209: store &preamble$154 preamble$153;
@ 210: let preamble$155 = "*value";
@ 211: let preamble$156 = {};
@ 212: let preamble$157 = preamble$156{preamble$155 -> &preamble$154};
@ 213: let &preamble$158 = alloc;
@ 214: store &preamble$158 preamble$157;
@ 215: let &StopIteration = &preamble$158;
@ 216: let preamble$284 = def (preamble$159) {
    @ 217: let preamble$160 = 0;
    @ 218: let &preamble$161 = preamble$159[preamble$160];
    @ 219: let preamble$162 = get &preamble$161;
    @ 220: let preamble$163 = "*value";
    @ 221: let preamble$164 = preamble$162 haskey preamble$163;
    @ 222: let &preamble$165 = if preamble$164 then {
        @ 232: let &preamble$166 = preamble$162{preamble$163};
        @ 233: ifresult &preamble$166;

    } else {
        @ 223: let preamble$167 = "Object has no attribute *value";
        @ 224: let &preamble$168 = alloc;
        @ 225: store &preamble$168 preamble$167;
        @ 226: let preamble$169 = "*value";
        @ 227: let preamble$170 = {};
        @ 228: let preamble$171 = preamble$170{preamble$169 -> &preamble$168};
        @ 229: let &preamble$172 = alloc;
        @ 230: store &preamble$172 preamble$171;
        @ 231: raise &preamble$172;

    };
    @ 234: let preamble$173 = get &preamble$165;
    @ 235: let preamble$280 = None;
    @ 236: let preamble$279 = preamble$280 == preamble$173;
    @ 237: let preamble$281 = if preamble$279 then {
        @ 421: let preamble$282 = False;
        @ 422: ifresult preamble$282;

    } else {
        @ 238: let preamble$276 = False;
        @ 239: let preamble$275 = preamble$276 == preamble$173;
        @ 240: let preamble$277 = if preamble$275 then {
            @ 419: let preamble$278 = False;
            @ 420: ifresult preamble$278;

        } else {
            @ 241: let preamble$272 = 0;
            @ 242: let preamble$271 = preamble$272 == preamble$173;
            @ 243: let preamble$273 = if preamble$271 then {
                @ 417: let preamble$274 = False;
                @ 418: ifresult preamble$274;

            } else {
                @ 244: let preamble$268 = "";
                @ 245: let preamble$267 = preamble$268 == preamble$173;
                @ 246: let preamble$269 = if preamble$267 then {
                    @ 415: let preamble$270 = False;
                    @ 416: ifresult preamble$270;

                } else {
                    @ 247: let preamble$264 = [];
                    @ 248: let preamble$263 = preamble$264 == preamble$173;
                    @ 249: let preamble$265 = if preamble$263 then {
                        @ 413: let preamble$266 = False;
                        @ 414: ifresult preamble$266;

                    } else {
                        @ 250: let preamble$260 = {};
                        @ 251: let preamble$259 = preamble$260 == preamble$173;
                        @ 252: let preamble$261 = if preamble$259 then {
                            @ 411: let preamble$262 = False;
                            @ 412: ifresult preamble$262;

                        } else {
                            @ 253: let preamble$174 = "__bool__";
                            @ 254: let preamble$257 = preamble$162 haskey preamble$174;
                            @ 255: let preamble$258 = if preamble$257 then {
                                @ 348: let &preamble$176 = preamble$162{preamble$174};
                                @ 349: let &preamble$177 = &preamble$176;
                                @ 350: let preamble$179 = get &preamble$177;
                                @ 351: let preamble$181 = "*value";
                                @ 352: let preamble$182 = preamble$179 haskey preamble$181;
                                @ 353: let &preamble$183 = if preamble$182 then {
                                    @ 363: let &preamble$184 = preamble$179{preamble$181};
                                    @ 364: ifresult &preamble$184;

                                } else {
                                    @ 354: let preamble$185 = "Object has no attribute *value";
                                    @ 355: let &preamble$186 = alloc;
                                    @ 356: store &preamble$186 preamble$185;
                                    @ 357: let preamble$187 = "*value";
                                    @ 358: let preamble$188 = {};
                                    @ 359: let preamble$189 = preamble$188{preamble$187 -> &preamble$186};
                                    @ 360: let &preamble$190 = alloc;
                                    @ 361: store &preamble$190 preamble$189;
                                    @ 362: raise &preamble$190;

                                };
                                @ 365: let preamble$180 = get &preamble$183;
                                @ 366: let preamble$191 = isfunc preamble$180;
                                @ 367: let preamble$192 = not preamble$191;
                                @ 368: let &preamble$178 = alloc;
                                @ 369: store &preamble$178 preamble$192;
                                @ 370: while &preamble$178 {
                                    @ 371: let preamble$193 = "__call__";
                                    @ 372: let preamble$194 = preamble$179 haskey preamble$193;
                                    @ 373: let &preamble$195 = if preamble$194 then {
                                        @ 383: let &preamble$196 = preamble$179{preamble$193};
                                        @ 384: ifresult &preamble$196;

                                    } else {
                                        @ 374: let preamble$197 = "Object is not callable";
                                        @ 375: let &preamble$198 = alloc;
                                        @ 376: store &preamble$198 preamble$197;
                                        @ 377: let preamble$199 = "*value";
                                        @ 378: let preamble$200 = {};
                                        @ 379: let preamble$201 = preamble$200{preamble$199 -> &preamble$198};
                                        @ 380: let &preamble$202 = alloc;
                                        @ 381: store &preamble$202 preamble$201;
                                        @ 382: raise &preamble$202;

                                    };
                                    @ 385: let &preamble$177 = &preamble$195;
                                    @ 386: let preamble$179 = get &preamble$177;
                                    @ 387: let preamble$181 = "*value";
                                    @ 388: let preamble$182 = preamble$179 haskey preamble$181;
                                    @ 389: let &preamble$183 = if preamble$182 then {
                                        @ 399: let &preamble$184 = preamble$179{preamble$181};
                                        @ 400: ifresult &preamble$184;

                                    } else {
                                        @ 390: let preamble$185 = "Object has no attribute *value";
                                        @ 391: let &preamble$186 = alloc;
                                        @ 392: store &preamble$186 preamble$185;
                                        @ 393: let preamble$187 = "*value";
                                        @ 394: let preamble$188 = {};
                                        @ 395: let preamble$189 = preamble$188{preamble$187 -> &preamble$186};
                                        @ 396: let &preamble$190 = alloc;
                                        @ 397: store &preamble$190 preamble$189;
                                        @ 398: raise &preamble$190;

                                    };
                                    @ 401: let preamble$180 = get &preamble$183;
                                    @ 402: let preamble$191 = isfunc preamble$180;
                                    @ 403: let preamble$192 = not preamble$191;
                                    @ 404: let &preamble$178 = alloc;
                                    @ 405: store &preamble$178 preamble$192;

                                };
                                @ 406: let preamble$204 = [&preamble$161];
                                @ 407: let &preamble$203 = preamble$180(preamble$204);
                                @ 408: let preamble$205 = get &preamble$203;
                                @ 409: ifresult preamble$205;

                            } else {
                                @ 256: let preamble$175 = "__len__";
                                @ 257: let preamble$255 = preamble$162 haskey preamble$175;
                                @ 258: let preamble$256 = if preamble$255 then {
                                    @ 261: let &preamble$206 = preamble$162{preamble$175};
                                    @ 262: let &preamble$207 = &preamble$206;
                                    @ 263: let preamble$209 = get &preamble$207;
                                    @ 264: let preamble$211 = "*value";
                                    @ 265: let preamble$212 = preamble$209 haskey preamble$211;
                                    @ 266: let &preamble$213 = if preamble$212 then {
                                        @ 276: let &preamble$214 = preamble$209{preamble$211};
                                        @ 277: ifresult &preamble$214;

                                    } else {
                                        @ 267: let preamble$215 = "Object has no attribute *value";
                                        @ 268: let &preamble$216 = alloc;
                                        @ 269: store &preamble$216 preamble$215;
                                        @ 270: let preamble$217 = "*value";
                                        @ 271: let preamble$218 = {};
                                        @ 272: let preamble$219 = preamble$218{preamble$217 -> &preamble$216};
                                        @ 273: let &preamble$220 = alloc;
                                        @ 274: store &preamble$220 preamble$219;
                                        @ 275: raise &preamble$220;

                                    };
                                    @ 278: let preamble$210 = get &preamble$213;
                                    @ 279: let preamble$221 = isfunc preamble$210;
                                    @ 280: let preamble$222 = not preamble$221;
                                    @ 281: let &preamble$208 = alloc;
                                    @ 282: store &preamble$208 preamble$222;
                                    @ 283: while &preamble$208 {
                                        @ 284: let preamble$223 = "__call__";
                                        @ 285: let preamble$224 = preamble$209 haskey preamble$223;
                                        @ 286: let &preamble$225 = if preamble$224 then {
                                            @ 296: let &preamble$226 = preamble$209{preamble$223};
                                            @ 297: ifresult &preamble$226;

                                        } else {
                                            @ 287: let preamble$227 = "Object is not callable";
                                            @ 288: let &preamble$228 = alloc;
                                            @ 289: store &preamble$228 preamble$227;
                                            @ 290: let preamble$229 = "*value";
                                            @ 291: let preamble$230 = {};
                                            @ 292: let preamble$231 = preamble$230{preamble$229 -> &preamble$228};
                                            @ 293: let &preamble$232 = alloc;
                                            @ 294: store &preamble$232 preamble$231;
                                            @ 295: raise &preamble$232;

                                        };
                                        @ 298: let &preamble$207 = &preamble$225;
                                        @ 299: let preamble$209 = get &preamble$207;
                                        @ 300: let preamble$211 = "*value";
                                        @ 301: let preamble$212 = preamble$209 haskey preamble$211;
                                        @ 302: let &preamble$213 = if preamble$212 then {
                                            @ 312: let &preamble$214 = preamble$209{preamble$211};
                                            @ 313: ifresult &preamble$214;

                                        } else {
                                            @ 303: let preamble$215 = "Object has no attribute *value";
                                            @ 304: let &preamble$216 = alloc;
                                            @ 305: store &preamble$216 preamble$215;
                                            @ 306: let preamble$217 = "*value";
                                            @ 307: let preamble$218 = {};
                                            @ 308: let preamble$219 = preamble$218{preamble$217 -> &preamble$216};
                                            @ 309: let &preamble$220 = alloc;
                                            @ 310: store &preamble$220 preamble$219;
                                            @ 311: raise &preamble$220;

                                        };
                                        @ 314: let preamble$210 = get &preamble$213;
                                        @ 315: let preamble$221 = isfunc preamble$210;
                                        @ 316: let preamble$222 = not preamble$221;
                                        @ 317: let &preamble$208 = alloc;
                                        @ 318: store &preamble$208 preamble$222;

                                    };
                                    @ 319: let preamble$234 = [&preamble$161];
                                    @ 320: let &preamble$233 = preamble$210(preamble$234);
                                    @ 321: let preamble$235 = get &preamble$233;
                                    @ 322: let preamble$236 = "*value";
                                    @ 323: let preamble$237 = preamble$235 haskey preamble$236;
                                    @ 324: let &preamble$238 = if preamble$237 then {
                                        @ 334: let &preamble$239 = preamble$235{preamble$236};
                                        @ 335: ifresult &preamble$239;

                                    } else {
                                        @ 325: let preamble$240 = "Object has no attribute *value";
                                        @ 326: let &preamble$241 = alloc;
                                        @ 327: store &preamble$241 preamble$240;
                                        @ 328: let preamble$242 = "*value";
                                        @ 329: let preamble$243 = {};
                                        @ 330: let preamble$244 = preamble$243{preamble$242 -> &preamble$241};
                                        @ 331: let &preamble$245 = alloc;
                                        @ 332: store &preamble$245 preamble$244;
                                        @ 333: raise &preamble$245;

                                    };
                                    @ 336: let preamble$246 = get &preamble$238;
                                    @ 337: let preamble$248 = isint preamble$246;
                                    @ 338: let preamble$247 = if preamble$248 then {
                                        @ 339: let preamble$251 = 0;
                                        @ 340: let preamble$250 = preamble$251 == preamble$246;
                                        @ 341: let preamble$252 = if preamble$250 then {
                                            @ 344: let preamble$253 = False;
                                            @ 345: ifresult preamble$253;

                                        } else {
                                            @ 342: let preamble$249 = True;
                                            @ 343: ifresult preamble$249;

                                        };

                                    } else {

                                    };
                                    @ 346: ifresult preamble$247;

                                } else {
                                    @ 259: let preamble$254 = True;
                                    @ 260: ifresult preamble$254;

                                };
                                @ 347: ifresult preamble$256;

                            };
                            @ 410: ifresult preamble$258;

                        };

                    };

                };

            };

        };

    };
    @ 423: ifresult preamble$281;
    @ 424: let &preamble$283 = if preamble$281 then {
        @ 426: ifresult &True;

    } else {
        @ 425: ifresult &False;

    };
    @ 427: return &preamble$283;

};
@ 428: let &preamble$285 = alloc;
@ 429: store &preamble$285 preamble$284;
@ 430: let preamble$286 = "*value";
@ 431: let preamble$287 = {};
@ 432: let preamble$288 = preamble$287{preamble$286 -> &preamble$285};
@ 433: let &preamble$289 = alloc;
@ 434: store &preamble$289 preamble$288;
@ 435: let &bool = &preamble$289;
@ 436: let &int_add = alloc;
@ 437: let preamble$325 = def (preamble$290) {
    @ 438: let preamble$291 = 0;
    @ 439: let &preamble$292 = preamble$290[preamble$291];
    @ 440: let preamble$293 = get &preamble$292;
    @ 441: let preamble$294 = "*value";
    @ 442: let preamble$295 = preamble$293 haskey preamble$294;
    @ 443: let &preamble$296 = if preamble$295 then {
        @ 453: let &preamble$297 = preamble$293{preamble$294};
        @ 454: ifresult &preamble$297;

    } else {
        @ 444: let preamble$298 = "Object has no attribute *value";
        @ 445: let &preamble$299 = alloc;
        @ 446: store &preamble$299 preamble$298;
        @ 447: let preamble$300 = "*value";
        @ 448: let preamble$301 = {};
        @ 449: let preamble$302 = preamble$301{preamble$300 -> &preamble$299};
        @ 450: let &preamble$303 = alloc;
        @ 451: store &preamble$303 preamble$302;
        @ 452: raise &preamble$303;

    };
    @ 455: let preamble$304 = get &preamble$296;
    @ 456: let preamble$305 = 1;
    @ 457: let &preamble$306 = preamble$290[preamble$305];
    @ 458: let preamble$307 = get &preamble$306;
    @ 459: let preamble$308 = "*value";
    @ 460: let preamble$309 = preamble$307 haskey preamble$308;
    @ 461: let &preamble$310 = if preamble$309 then {
        @ 471: let &preamble$311 = preamble$307{preamble$308};
        @ 472: ifresult &preamble$311;

    } else {
        @ 462: let preamble$312 = "Object has no attribute *value";
        @ 463: let &preamble$313 = alloc;
        @ 464: store &preamble$313 preamble$312;
        @ 465: let preamble$314 = "*value";
        @ 466: let preamble$315 = {};
        @ 467: let preamble$316 = preamble$315{preamble$314 -> &preamble$313};
        @ 468: let &preamble$317 = alloc;
        @ 469: store &preamble$317 preamble$316;
        @ 470: raise &preamble$317;

    };
    @ 473: let preamble$318 = get &preamble$310;
    @ 474: let preamble$319 = preamble$304 int+ preamble$318;
    @ 475: let &preamble$320 = alloc;
    @ 476: store &preamble$320 preamble$319;
    @ 477: let preamble$321 = "*value";
    @ 478: let preamble$322 = {};
    @ 479: let preamble$323 = preamble$322{preamble$321 -> &preamble$320};
    @ 480: let &preamble$324 = alloc;
    @ 481: store &preamble$324 preamble$323;
    @ 482: return &preamble$324;

};
@ 483: store &int_add preamble$325;
@ 484: let &method_call = alloc;
@ 485: let preamble$356 = def (preamble$326) {
    @ 486: let preamble$327 = 0;
    @ 487: let &preamble$328 = preamble$326[preamble$327];
    @ 488: let preamble$329 = get &preamble$328;
    @ 489: let preamble$330 = "*value";
    @ 490: let preamble$331 = preamble$329 haskey preamble$330;
    @ 491: let &preamble$332 = if preamble$331 then {
        @ 501: let &preamble$333 = preamble$329{preamble$330};
        @ 502: ifresult &preamble$333;

    } else {
        @ 492: let preamble$334 = "Object has no attribute *value";
        @ 493: let &preamble$335 = alloc;
        @ 494: store &preamble$335 preamble$334;
        @ 495: let preamble$336 = "*value";
        @ 496: let preamble$337 = {};
        @ 497: let preamble$338 = preamble$337{preamble$336 -> &preamble$335};
        @ 498: let &preamble$339 = alloc;
        @ 499: store &preamble$339 preamble$338;
        @ 500: raise &preamble$339;

    };
    @ 503: let preamble$340 = get &preamble$332;
    @ 504: let preamble$341 = "*value";
    @ 505: let preamble$342 = preamble$340 haskey preamble$341;
    @ 506: let &preamble$343 = if preamble$342 then {
        @ 516: let &preamble$344 = preamble$340{preamble$341};
        @ 517: ifresult &preamble$344;

    } else {
        @ 507: let preamble$345 = "Object has no attribute *value";
        @ 508: let &preamble$346 = alloc;
        @ 509: store &preamble$346 preamble$345;
        @ 510: let preamble$347 = "*value";
        @ 511: let preamble$348 = {};
        @ 512: let preamble$349 = preamble$348{preamble$347 -> &preamble$346};
        @ 513: let &preamble$350 = alloc;
        @ 514: store &preamble$350 preamble$349;
        @ 515: raise &preamble$350;

    };
    @ 518: let preamble$351 = get &preamble$343;
    @ 519: let preamble$352 = 1;
    @ 520: let preamble$353 = None;
    @ 521: let preamble$354 = preamble$326[preamble$352:preamble$353];
    @ 522: let &preamble$355 = preamble$351(preamble$354);
    @ 523: return &preamble$355;

};
@ 524: store &method_call preamble$356;
@ 525: let preamble$357 = "*None";
@ 526: let preamble$358 = get &scope;
@ 527: let preamble$359 = preamble$358{preamble$357 -> &None};
@ 528: store &scope preamble$359;
@ 529: let preamble$360 = "True";
@ 530: let preamble$361 = get &scope;
@ 531: let preamble$362 = preamble$361{preamble$360 -> &True};
@ 532: store &scope preamble$362;
@ 533: let preamble$363 = "False";
@ 534: let preamble$364 = get &scope;
@ 535: let preamble$365 = preamble$364{preamble$363 -> &False};
@ 536: store &scope preamble$365;
@ 537: let preamble$366 = "bool";
@ 538: let preamble$367 = get &scope;
@ 539: let preamble$368 = preamble$367{preamble$366 -> &bool};
@ 540: store &scope preamble$368;
@ 541: let preamble$369 = "NameError";
@ 542: let preamble$370 = get &scope;
@ 543: let preamble$371 = preamble$370{preamble$369 -> &NameError};
@ 544: store &scope preamble$371;
@ 545: let preamble$372 = "TypeError";
@ 546: let preamble$373 = get &scope;
@ 547: let preamble$374 = preamble$373{preamble$372 -> &TypeError};
@ 548: store &scope preamble$374;
@ 549: let preamble$375 = "AttributeError";
@ 550: let preamble$376 = get &scope;
@ 551: let preamble$377 = preamble$376{preamble$375 -> &AttributeError};
@ 552: store &scope preamble$377;
@ 553: let preamble$378 = "ValueError";
@ 554: let preamble$379 = get &scope;
@ 555: let preamble$380 = preamble$379{preamble$378 -> &ValueError};
@ 556: store &scope preamble$380;
@ 557: let preamble$381 = "StopIteration";
@ 558: let preamble$382 = get &scope;
@ 559: let preamble$383 = preamble$382{preamble$381 -> &StopIteration};
@ 560: store &scope preamble$383;
@ 561: let lamia$0 = 5;
@ 562: let &lamia$1 = alloc;
@ 563: store &lamia$1 lamia$0;
@ 564: let lamia$2 = "*value";
@ 565: let lamia$3 = {};
@ 566: let lamia$4 = lamia$3{lamia$2 -> &lamia$1};
@ 567: let &lamia$5 = alloc;
@ 568: store &lamia$5 lamia$4;
@ 569: let lamia$6 = "$norm0";
@ 570: let lamia$7 = get &scope;
@ 571: let lamia$8 = lamia$7{lamia$6 -> &lamia$5};
@ 572: store &scope lamia$8;
@ 573: let lamia$9 = "$norm0";
@ 574: let &lamia$10 = get_from_scope(lamia$9);
@ 575: let lamia$11 = "x";
@ 576: let lamia$12 = get &scope;
@ 577: let lamia$13 = lamia$12{lamia$11 -> &lamia$10};
@ 578: store &scope lamia$13;
@ 579: let lamia$14 = 2;
@ 580: let &lamia$15 = alloc;
@ 581: store &lamia$15 lamia$14;
@ 582: let lamia$16 = "*value";
@ 583: let lamia$17 = {};
@ 584: let lamia$18 = lamia$17{lamia$16 -> &lamia$15};
@ 585: let &lamia$19 = alloc;
@ 586: store &lamia$19 lamia$18;
@ 587: let lamia$20 = "$norm1";
@ 588: let lamia$21 = get &scope;
@ 589: let lamia$22 = lamia$21{lamia$20 -> &lamia$19};
@ 590: store &scope lamia$22;
@ 591: let lamia$23 = "$norm1";
@ 592: let &lamia$24 = get_from_scope(lamia$23);
@ 593: let lamia$25 = get &lamia$24;
@ 594: let lamia$26 = "__add__";
@ 595: let lamia$27 = lamia$25 haskey lamia$26;
@ 596: let &lamia$28 = if lamia$27 then {
    @ 606: let &lamia$29 = lamia$25{lamia$26};
    @ 607: ifresult &lamia$29;

} else {
    @ 597: let lamia$30 = "Object has no attribute __add__";
    @ 598: let &lamia$31 = alloc;
    @ 599: store &lamia$31 lamia$30;
    @ 600: let lamia$32 = "*value";
    @ 601: let lamia$33 = {};
    @ 602: let lamia$34 = lamia$33{lamia$32 -> &lamia$31};
    @ 603: let &lamia$35 = alloc;
    @ 604: store &lamia$35 lamia$34;
    @ 605: raise &lamia$35;

};
@ 608: let lamia$36 = get &lamia$28;
@ 609: let lamia$37 = isfunc lamia$36;
@ 610: let &lamia$38 = if lamia$37 then {
    @ 612: let lamia$39 = def (lamia$40) {
        @ 613: let lamia$41 = [&lamia$24];
        @ 614: let lamia$42 = lamia$41 || lamia$40;
        @ 615: let &lamia$43 = lamia$36(lamia$42);
        @ 616: return &lamia$43;

    };
    @ 617: let &lamia$44 = alloc;
    @ 618: store &lamia$44 lamia$39;
    @ 619: let lamia$45 = "*value";
    @ 620: let lamia$46 = {};
    @ 621: let lamia$47 = lamia$46{lamia$45 -> &lamia$44};
    @ 622: let &lamia$48 = alloc;
    @ 623: store &lamia$48 lamia$47;
    @ 624: ifresult &lamia$48;

} else {
    @ 611: ifresult &lamia$28;

};
@ 625: let lamia$49 = "$norm2";
@ 626: let lamia$50 = get &scope;
@ 627: let lamia$51 = lamia$50{lamia$49 -> &lamia$38};
@ 628: store &scope lamia$51;
@ 629: let lamia$52 = 2;
@ 630: let &lamia$53 = alloc;
@ 631: store &lamia$53 lamia$52;
@ 632: let lamia$54 = "*value";
@ 633: let lamia$55 = {};
@ 634: let lamia$56 = lamia$55{lamia$54 -> &lamia$53};
@ 635: let &lamia$57 = alloc;
@ 636: store &lamia$57 lamia$56;
@ 637: let lamia$58 = "$norm3";
@ 638: let lamia$59 = get &scope;
@ 639: let lamia$60 = lamia$59{lamia$58 -> &lamia$57};
@ 640: store &scope lamia$60;
@ 641: let lamia$61 = "$norm2";
@ 642: let &lamia$62 = get_from_scope(lamia$61);
@ 643: let lamia$63 = "$norm3";
@ 644: let &lamia$64 = get_from_scope(lamia$63);
@ 645: let &lamia$65 = &lamia$62;
@ 646: let lamia$67 = get &lamia$65;
@ 647: let lamia$69 = "*value";
@ 648: let lamia$70 = lamia$67 haskey lamia$69;
@ 649: let &lamia$71 = if lamia$70 then {
    @ 659: let &lamia$72 = lamia$67{lamia$69};
    @ 660: ifresult &lamia$72;

} else {
    @ 650: let lamia$73 = "Object has no attribute *value";
    @ 651: let &lamia$74 = alloc;
    @ 652: store &lamia$74 lamia$73;
    @ 653: let lamia$75 = "*value";
    @ 654: let lamia$76 = {};
    @ 655: let lamia$77 = lamia$76{lamia$75 -> &lamia$74};
    @ 656: let &lamia$78 = alloc;
    @ 657: store &lamia$78 lamia$77;
    @ 658: raise &lamia$78;

};
@ 661: let lamia$68 = get &lamia$71;
@ 662: let lamia$79 = isfunc lamia$68;
@ 663: let lamia$80 = not lamia$79;
@ 664: let &lamia$66 = alloc;
@ 665: store &lamia$66 lamia$80;
@ 666: while &lamia$66 {
    @ 667: let lamia$81 = "__call__";
    @ 668: let lamia$82 = lamia$67 haskey lamia$81;
    @ 669: let &lamia$83 = if lamia$82 then {
        @ 679: let &lamia$84 = lamia$67{lamia$81};
        @ 680: ifresult &lamia$84;

    } else {
        @ 670: let lamia$85 = "Object is not callable";
        @ 671: let &lamia$86 = alloc;
        @ 672: store &lamia$86 lamia$85;
        @ 673: let lamia$87 = "*value";
        @ 674: let lamia$88 = {};
        @ 675: let lamia$89 = lamia$88{lamia$87 -> &lamia$86};
        @ 676: let &lamia$90 = alloc;
        @ 677: store &lamia$90 lamia$89;
        @ 678: raise &lamia$90;

    };
    @ 681: let &lamia$65 = &lamia$83;
    @ 682: let lamia$67 = get &lamia$65;
    @ 683: let lamia$69 = "*value";
    @ 684: let lamia$70 = lamia$67 haskey lamia$69;
    @ 685: let &lamia$71 = if lamia$70 then {
        @ 695: let &lamia$72 = lamia$67{lamia$69};
        @ 696: ifresult &lamia$72;

    } else {
        @ 686: let lamia$73 = "Object has no attribute *value";
        @ 687: let &lamia$74 = alloc;
        @ 688: store &lamia$74 lamia$73;
        @ 689: let lamia$75 = "*value";
        @ 690: let lamia$76 = {};
        @ 691: let lamia$77 = lamia$76{lamia$75 -> &lamia$74};
        @ 692: let &lamia$78 = alloc;
        @ 693: store &lamia$78 lamia$77;
        @ 694: raise &lamia$78;

    };
    @ 697: let lamia$68 = get &lamia$71;
    @ 698: let lamia$79 = isfunc lamia$68;
    @ 699: let lamia$80 = not lamia$79;
    @ 700: let &lamia$66 = alloc;
    @ 701: store &lamia$66 lamia$80;

};
@ 702: let lamia$91 = [&lamia$64];
@ 703: let &lamia$92 = lamia$68(lamia$91);
@ 704: let lamia$93 = "$norm4";
@ 705: let lamia$94 = get &scope;
@ 706: let lamia$95 = lamia$94{lamia$93 -> &lamia$92};
@ 707: store &scope lamia$95;
@ 708: let lamia$96 = "$norm4";
@ 709: let &lamia$97 = get_from_scope(lamia$96);
@ 710: let lamia$98 = "z";
@ 711: let lamia$99 = get &scope;
@ 712: let lamia$100 = lamia$99{lamia$98 -> &lamia$97};
@ 713: store &scope lamia$100;
