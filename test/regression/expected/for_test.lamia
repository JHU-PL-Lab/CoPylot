@   0: let preamble$0 = {};
@   1: let &scope = alloc;
@   2: store &scope preamble$0;
@   3: let get_from_parent_scope = def (preamble$1) {
    @   4: let preamble$2 = "name is not defined";
    @   5: let &preamble$3 = alloc;
    @   6: store &preamble$3 preamble$2;
    @   7: let preamble$4 = "*value";
    @   8: let preamble$5 = {};
    @   9: let preamble$6 = preamble$5{preamble$4 -> &preamble$3};
    @  10: let &preamble$7 = alloc;
    @  11: store &preamble$7 preamble$6;
    @  12: raise &preamble$7;

};
@  13: let get_from_scope = def (preamble$8) {
    @  14: let preamble$9 = get &scope;
    @  15: let preamble$10 = preamble$9 haskey preamble$8;
    @  16: let &preamble$11 = if preamble$10 then {
        @  19: let &preamble$12 = preamble$9{preamble$8};
        @  20: ifresult &preamble$12;

    } else {
        @  17: let &preamble$13 = get_from_parent_scope(preamble$8);
        @  18: ifresult &preamble$13;

    };
    @  21: return &preamble$11;

};
@  22: let &preamble$15 = alloc;
@  23: let preamble$14 = 1;
@  24: store &preamble$15 preamble$14;
@  25: let preamble$16 = {};
@  26: let preamble$17 = "*value";
@  27: let preamble$18 = preamble$16{preamble$17 -> &preamble$15};
@  28: let &True = alloc;
@  29: store &True preamble$18;
@  30: let &preamble$20 = alloc;
@  31: let preamble$19 = 0;
@  32: store &preamble$20 preamble$19;
@  33: let preamble$21 = {};
@  34: let preamble$22 = "*value";
@  35: let preamble$23 = preamble$21{preamble$22 -> &preamble$20};
@  36: let &False = alloc;
@  37: store &False preamble$23;
@  38: let &preamble$25 = alloc;
@  39: let preamble$24 = None;
@  40: store &preamble$25 preamble$24;
@  41: let preamble$26 = {};
@  42: let preamble$27 = "*value";
@  43: let preamble$28 = preamble$26{preamble$27 -> &preamble$25};
@  44: let &None = alloc;
@  45: store &None preamble$28;
@  46: let preamble$49 = def (preamble$29) {
    @  47: let preamble$30 = 0;
    @  48: let &preamble$31 = preamble$29[preamble$30];
    @  49: let preamble$32 = get &preamble$31;
    @  50: let preamble$33 = "*value";
    @  51: let preamble$34 = preamble$32 haskey preamble$33;
    @  52: let &preamble$35 = if preamble$34 then {
        @  62: let &preamble$36 = preamble$32{preamble$33};
        @  63: ifresult &preamble$36;

    } else {
        @  53: let preamble$37 = "Object has no attribute *value";
        @  54: let &preamble$38 = alloc;
        @  55: store &preamble$38 preamble$37;
        @  56: let preamble$39 = "*value";
        @  57: let preamble$40 = {};
        @  58: let preamble$41 = preamble$40{preamble$39 -> &preamble$38};
        @  59: let &preamble$42 = alloc;
        @  60: store &preamble$42 preamble$41;
        @  61: raise &preamble$42;

    };
    @  64: let preamble$43 = get &preamble$35;
    @  65: let &preamble$44 = alloc;
    @  66: store &preamble$44 preamble$43;
    @  67: let preamble$45 = "*value";
    @  68: let preamble$46 = {};
    @  69: let preamble$47 = preamble$46{preamble$45 -> &preamble$44};
    @  70: let &preamble$48 = alloc;
    @  71: store &preamble$48 preamble$47;

};
@  72: let &preamble$50 = alloc;
@  73: store &preamble$50 preamble$49;
@  74: let preamble$51 = "*value";
@  75: let preamble$52 = {};
@  76: let preamble$53 = preamble$52{preamble$51 -> &preamble$50};
@  77: let &preamble$54 = alloc;
@  78: store &preamble$54 preamble$53;
@  79: let &AttributeError = &preamble$54;
@  80: let preamble$75 = def (preamble$55) {
    @  81: let preamble$56 = 0;
    @  82: let &preamble$57 = preamble$55[preamble$56];
    @  83: let preamble$58 = get &preamble$57;
    @  84: let preamble$59 = "*value";
    @  85: let preamble$60 = preamble$58 haskey preamble$59;
    @  86: let &preamble$61 = if preamble$60 then {
        @  96: let &preamble$62 = preamble$58{preamble$59};
        @  97: ifresult &preamble$62;

    } else {
        @  87: let preamble$63 = "Object has no attribute *value";
        @  88: let &preamble$64 = alloc;
        @  89: store &preamble$64 preamble$63;
        @  90: let preamble$65 = "*value";
        @  91: let preamble$66 = {};
        @  92: let preamble$67 = preamble$66{preamble$65 -> &preamble$64};
        @  93: let &preamble$68 = alloc;
        @  94: store &preamble$68 preamble$67;
        @  95: raise &preamble$68;

    };
    @  98: let preamble$69 = get &preamble$61;
    @  99: let &preamble$70 = alloc;
    @ 100: store &preamble$70 preamble$69;
    @ 101: let preamble$71 = "*value";
    @ 102: let preamble$72 = {};
    @ 103: let preamble$73 = preamble$72{preamble$71 -> &preamble$70};
    @ 104: let &preamble$74 = alloc;
    @ 105: store &preamble$74 preamble$73;

};
@ 106: let &preamble$76 = alloc;
@ 107: store &preamble$76 preamble$75;
@ 108: let preamble$77 = "*value";
@ 109: let preamble$78 = {};
@ 110: let preamble$79 = preamble$78{preamble$77 -> &preamble$76};
@ 111: let &preamble$80 = alloc;
@ 112: store &preamble$80 preamble$79;
@ 113: let &TypeError = &preamble$80;
@ 114: let preamble$101 = def (preamble$81) {
    @ 115: let preamble$82 = 0;
    @ 116: let &preamble$83 = preamble$81[preamble$82];
    @ 117: let preamble$84 = get &preamble$83;
    @ 118: let preamble$85 = "*value";
    @ 119: let preamble$86 = preamble$84 haskey preamble$85;
    @ 120: let &preamble$87 = if preamble$86 then {
        @ 130: let &preamble$88 = preamble$84{preamble$85};
        @ 131: ifresult &preamble$88;

    } else {
        @ 121: let preamble$89 = "Object has no attribute *value";
        @ 122: let &preamble$90 = alloc;
        @ 123: store &preamble$90 preamble$89;
        @ 124: let preamble$91 = "*value";
        @ 125: let preamble$92 = {};
        @ 126: let preamble$93 = preamble$92{preamble$91 -> &preamble$90};
        @ 127: let &preamble$94 = alloc;
        @ 128: store &preamble$94 preamble$93;
        @ 129: raise &preamble$94;

    };
    @ 132: let preamble$95 = get &preamble$87;
    @ 133: let &preamble$96 = alloc;
    @ 134: store &preamble$96 preamble$95;
    @ 135: let preamble$97 = "*value";
    @ 136: let preamble$98 = {};
    @ 137: let preamble$99 = preamble$98{preamble$97 -> &preamble$96};
    @ 138: let &preamble$100 = alloc;
    @ 139: store &preamble$100 preamble$99;

};
@ 140: let &preamble$102 = alloc;
@ 141: store &preamble$102 preamble$101;
@ 142: let preamble$103 = "*value";
@ 143: let preamble$104 = {};
@ 144: let preamble$105 = preamble$104{preamble$103 -> &preamble$102};
@ 145: let &preamble$106 = alloc;
@ 146: store &preamble$106 preamble$105;
@ 147: let &NameError = &preamble$106;
@ 148: let preamble$127 = def (preamble$107) {
    @ 149: let preamble$108 = 0;
    @ 150: let &preamble$109 = preamble$107[preamble$108];
    @ 151: let preamble$110 = get &preamble$109;
    @ 152: let preamble$111 = "*value";
    @ 153: let preamble$112 = preamble$110 haskey preamble$111;
    @ 154: let &preamble$113 = if preamble$112 then {
        @ 164: let &preamble$114 = preamble$110{preamble$111};
        @ 165: ifresult &preamble$114;

    } else {
        @ 155: let preamble$115 = "Object has no attribute *value";
        @ 156: let &preamble$116 = alloc;
        @ 157: store &preamble$116 preamble$115;
        @ 158: let preamble$117 = "*value";
        @ 159: let preamble$118 = {};
        @ 160: let preamble$119 = preamble$118{preamble$117 -> &preamble$116};
        @ 161: let &preamble$120 = alloc;
        @ 162: store &preamble$120 preamble$119;
        @ 163: raise &preamble$120;

    };
    @ 166: let preamble$121 = get &preamble$113;
    @ 167: let &preamble$122 = alloc;
    @ 168: store &preamble$122 preamble$121;
    @ 169: let preamble$123 = "*value";
    @ 170: let preamble$124 = {};
    @ 171: let preamble$125 = preamble$124{preamble$123 -> &preamble$122};
    @ 172: let &preamble$126 = alloc;
    @ 173: store &preamble$126 preamble$125;

};
@ 174: let &preamble$128 = alloc;
@ 175: store &preamble$128 preamble$127;
@ 176: let preamble$129 = "*value";
@ 177: let preamble$130 = {};
@ 178: let preamble$131 = preamble$130{preamble$129 -> &preamble$128};
@ 179: let &preamble$132 = alloc;
@ 180: store &preamble$132 preamble$131;
@ 181: let &StopIteration = &preamble$132;
@ 182: let preamble$258 = def (preamble$133) {
    @ 183: let preamble$134 = 0;
    @ 184: let &preamble$135 = preamble$133[preamble$134];
    @ 185: let preamble$136 = get &preamble$135;
    @ 186: let preamble$137 = "*value";
    @ 187: let preamble$138 = preamble$136 haskey preamble$137;
    @ 188: let &preamble$139 = if preamble$138 then {
        @ 198: let &preamble$140 = preamble$136{preamble$137};
        @ 199: ifresult &preamble$140;

    } else {
        @ 189: let preamble$141 = "Object has no attribute *value";
        @ 190: let &preamble$142 = alloc;
        @ 191: store &preamble$142 preamble$141;
        @ 192: let preamble$143 = "*value";
        @ 193: let preamble$144 = {};
        @ 194: let preamble$145 = preamble$144{preamble$143 -> &preamble$142};
        @ 195: let &preamble$146 = alloc;
        @ 196: store &preamble$146 preamble$145;
        @ 197: raise &preamble$146;

    };
    @ 200: let preamble$147 = get &preamble$139;
    @ 201: let preamble$254 = None;
    @ 202: let preamble$253 = preamble$254 == preamble$147;
    @ 203: let preamble$255 = if preamble$253 then {
        @ 387: let preamble$256 = False;
        @ 388: ifresult preamble$256;

    } else {
        @ 204: let preamble$250 = False;
        @ 205: let preamble$249 = preamble$250 == preamble$147;
        @ 206: let preamble$251 = if preamble$249 then {
            @ 385: let preamble$252 = False;
            @ 386: ifresult preamble$252;

        } else {
            @ 207: let preamble$246 = 0;
            @ 208: let preamble$245 = preamble$246 == preamble$147;
            @ 209: let preamble$247 = if preamble$245 then {
                @ 383: let preamble$248 = False;
                @ 384: ifresult preamble$248;

            } else {
                @ 210: let preamble$242 = "";
                @ 211: let preamble$241 = preamble$242 == preamble$147;
                @ 212: let preamble$243 = if preamble$241 then {
                    @ 381: let preamble$244 = False;
                    @ 382: ifresult preamble$244;

                } else {
                    @ 213: let preamble$238 = [];
                    @ 214: let preamble$237 = preamble$238 == preamble$147;
                    @ 215: let preamble$239 = if preamble$237 then {
                        @ 379: let preamble$240 = False;
                        @ 380: ifresult preamble$240;

                    } else {
                        @ 216: let preamble$234 = {};
                        @ 217: let preamble$233 = preamble$234 == preamble$147;
                        @ 218: let preamble$235 = if preamble$233 then {
                            @ 377: let preamble$236 = False;
                            @ 378: ifresult preamble$236;

                        } else {
                            @ 219: let preamble$148 = "__bool__";
                            @ 220: let preamble$231 = preamble$136 haskey preamble$148;
                            @ 221: let preamble$232 = if preamble$231 then {
                                @ 314: let &preamble$150 = preamble$136{preamble$148};
                                @ 315: let &preamble$151 = &preamble$150;
                                @ 316: let preamble$153 = get &preamble$151;
                                @ 317: let preamble$155 = "*value";
                                @ 318: let preamble$156 = preamble$153 haskey preamble$155;
                                @ 319: let &preamble$157 = if preamble$156 then {
                                    @ 329: let &preamble$158 = preamble$153{preamble$155};
                                    @ 330: ifresult &preamble$158;

                                } else {
                                    @ 320: let preamble$159 = "Object has no attribute *value";
                                    @ 321: let &preamble$160 = alloc;
                                    @ 322: store &preamble$160 preamble$159;
                                    @ 323: let preamble$161 = "*value";
                                    @ 324: let preamble$162 = {};
                                    @ 325: let preamble$163 = preamble$162{preamble$161 -> &preamble$160};
                                    @ 326: let &preamble$164 = alloc;
                                    @ 327: store &preamble$164 preamble$163;
                                    @ 328: raise &preamble$164;

                                };
                                @ 331: let preamble$154 = get &preamble$157;
                                @ 332: let preamble$165 = isfunc preamble$154;
                                @ 333: let preamble$166 = not preamble$165;
                                @ 334: let &preamble$152 = alloc;
                                @ 335: store &preamble$152 preamble$166;
                                @ 336: while &preamble$152 {
                                    @ 337: let preamble$167 = "__call__";
                                    @ 338: let preamble$168 = preamble$153 haskey preamble$167;
                                    @ 339: let &preamble$169 = if preamble$168 then {
                                        @ 349: let &preamble$170 = preamble$153{preamble$167};
                                        @ 350: ifresult &preamble$170;

                                    } else {
                                        @ 340: let preamble$171 = "Object is not callable";
                                        @ 341: let &preamble$172 = alloc;
                                        @ 342: store &preamble$172 preamble$171;
                                        @ 343: let preamble$173 = "*value";
                                        @ 344: let preamble$174 = {};
                                        @ 345: let preamble$175 = preamble$174{preamble$173 -> &preamble$172};
                                        @ 346: let &preamble$176 = alloc;
                                        @ 347: store &preamble$176 preamble$175;
                                        @ 348: raise &preamble$176;

                                    };
                                    @ 351: let &preamble$151 = &preamble$169;
                                    @ 352: let preamble$153 = get &preamble$151;
                                    @ 353: let preamble$155 = "*value";
                                    @ 354: let preamble$156 = preamble$153 haskey preamble$155;
                                    @ 355: let &preamble$157 = if preamble$156 then {
                                        @ 365: let &preamble$158 = preamble$153{preamble$155};
                                        @ 366: ifresult &preamble$158;

                                    } else {
                                        @ 356: let preamble$159 = "Object has no attribute *value";
                                        @ 357: let &preamble$160 = alloc;
                                        @ 358: store &preamble$160 preamble$159;
                                        @ 359: let preamble$161 = "*value";
                                        @ 360: let preamble$162 = {};
                                        @ 361: let preamble$163 = preamble$162{preamble$161 -> &preamble$160};
                                        @ 362: let &preamble$164 = alloc;
                                        @ 363: store &preamble$164 preamble$163;
                                        @ 364: raise &preamble$164;

                                    };
                                    @ 367: let preamble$154 = get &preamble$157;
                                    @ 368: let preamble$165 = isfunc preamble$154;
                                    @ 369: let preamble$166 = not preamble$165;
                                    @ 370: let &preamble$152 = alloc;
                                    @ 371: store &preamble$152 preamble$166;

                                };
                                @ 372: let preamble$178 = [&preamble$135];
                                @ 373: let &preamble$177 = preamble$154(preamble$178);
                                @ 374: let preamble$179 = get &preamble$177;
                                @ 375: ifresult preamble$179;

                            } else {
                                @ 222: let preamble$149 = "__len__";
                                @ 223: let preamble$229 = preamble$136 haskey preamble$149;
                                @ 224: let preamble$230 = if preamble$229 then {
                                    @ 227: let &preamble$180 = preamble$136{preamble$149};
                                    @ 228: let &preamble$181 = &preamble$180;
                                    @ 229: let preamble$183 = get &preamble$181;
                                    @ 230: let preamble$185 = "*value";
                                    @ 231: let preamble$186 = preamble$183 haskey preamble$185;
                                    @ 232: let &preamble$187 = if preamble$186 then {
                                        @ 242: let &preamble$188 = preamble$183{preamble$185};
                                        @ 243: ifresult &preamble$188;

                                    } else {
                                        @ 233: let preamble$189 = "Object has no attribute *value";
                                        @ 234: let &preamble$190 = alloc;
                                        @ 235: store &preamble$190 preamble$189;
                                        @ 236: let preamble$191 = "*value";
                                        @ 237: let preamble$192 = {};
                                        @ 238: let preamble$193 = preamble$192{preamble$191 -> &preamble$190};
                                        @ 239: let &preamble$194 = alloc;
                                        @ 240: store &preamble$194 preamble$193;
                                        @ 241: raise &preamble$194;

                                    };
                                    @ 244: let preamble$184 = get &preamble$187;
                                    @ 245: let preamble$195 = isfunc preamble$184;
                                    @ 246: let preamble$196 = not preamble$195;
                                    @ 247: let &preamble$182 = alloc;
                                    @ 248: store &preamble$182 preamble$196;
                                    @ 249: while &preamble$182 {
                                        @ 250: let preamble$197 = "__call__";
                                        @ 251: let preamble$198 = preamble$183 haskey preamble$197;
                                        @ 252: let &preamble$199 = if preamble$198 then {
                                            @ 262: let &preamble$200 = preamble$183{preamble$197};
                                            @ 263: ifresult &preamble$200;

                                        } else {
                                            @ 253: let preamble$201 = "Object is not callable";
                                            @ 254: let &preamble$202 = alloc;
                                            @ 255: store &preamble$202 preamble$201;
                                            @ 256: let preamble$203 = "*value";
                                            @ 257: let preamble$204 = {};
                                            @ 258: let preamble$205 = preamble$204{preamble$203 -> &preamble$202};
                                            @ 259: let &preamble$206 = alloc;
                                            @ 260: store &preamble$206 preamble$205;
                                            @ 261: raise &preamble$206;

                                        };
                                        @ 264: let &preamble$181 = &preamble$199;
                                        @ 265: let preamble$183 = get &preamble$181;
                                        @ 266: let preamble$185 = "*value";
                                        @ 267: let preamble$186 = preamble$183 haskey preamble$185;
                                        @ 268: let &preamble$187 = if preamble$186 then {
                                            @ 278: let &preamble$188 = preamble$183{preamble$185};
                                            @ 279: ifresult &preamble$188;

                                        } else {
                                            @ 269: let preamble$189 = "Object has no attribute *value";
                                            @ 270: let &preamble$190 = alloc;
                                            @ 271: store &preamble$190 preamble$189;
                                            @ 272: let preamble$191 = "*value";
                                            @ 273: let preamble$192 = {};
                                            @ 274: let preamble$193 = preamble$192{preamble$191 -> &preamble$190};
                                            @ 275: let &preamble$194 = alloc;
                                            @ 276: store &preamble$194 preamble$193;
                                            @ 277: raise &preamble$194;

                                        };
                                        @ 280: let preamble$184 = get &preamble$187;
                                        @ 281: let preamble$195 = isfunc preamble$184;
                                        @ 282: let preamble$196 = not preamble$195;
                                        @ 283: let &preamble$182 = alloc;
                                        @ 284: store &preamble$182 preamble$196;

                                    };
                                    @ 285: let preamble$208 = [&preamble$135];
                                    @ 286: let &preamble$207 = preamble$184(preamble$208);
                                    @ 287: let preamble$209 = get &preamble$207;
                                    @ 288: let preamble$210 = "*value";
                                    @ 289: let preamble$211 = preamble$209 haskey preamble$210;
                                    @ 290: let &preamble$212 = if preamble$211 then {
                                        @ 300: let &preamble$213 = preamble$209{preamble$210};
                                        @ 301: ifresult &preamble$213;

                                    } else {
                                        @ 291: let preamble$214 = "Object has no attribute *value";
                                        @ 292: let &preamble$215 = alloc;
                                        @ 293: store &preamble$215 preamble$214;
                                        @ 294: let preamble$216 = "*value";
                                        @ 295: let preamble$217 = {};
                                        @ 296: let preamble$218 = preamble$217{preamble$216 -> &preamble$215};
                                        @ 297: let &preamble$219 = alloc;
                                        @ 298: store &preamble$219 preamble$218;
                                        @ 299: raise &preamble$219;

                                    };
                                    @ 302: let preamble$220 = get &preamble$212;
                                    @ 303: let preamble$222 = isint preamble$220;
                                    @ 304: let preamble$221 = if preamble$222 then {
                                        @ 305: let preamble$225 = 0;
                                        @ 306: let preamble$224 = preamble$225 == preamble$220;
                                        @ 307: let preamble$226 = if preamble$224 then {
                                            @ 310: let preamble$227 = False;
                                            @ 311: ifresult preamble$227;

                                        } else {
                                            @ 308: let preamble$223 = True;
                                            @ 309: ifresult preamble$223;

                                        };

                                    } else {

                                    };
                                    @ 312: ifresult preamble$221;

                                } else {
                                    @ 225: let preamble$228 = True;
                                    @ 226: ifresult preamble$228;

                                };
                                @ 313: ifresult preamble$230;

                            };
                            @ 376: ifresult preamble$232;

                        };

                    };

                };

            };

        };

    };
    @ 389: ifresult preamble$255;
    @ 390: let &preamble$257 = if preamble$255 then {
        @ 392: ifresult &True;

    } else {
        @ 391: ifresult &False;

    };
    @ 393: return &preamble$257;

};
@ 394: let &preamble$259 = alloc;
@ 395: store &preamble$259 preamble$258;
@ 396: let preamble$260 = "*value";
@ 397: let preamble$261 = {};
@ 398: let preamble$262 = preamble$261{preamble$260 -> &preamble$259};
@ 399: let &preamble$263 = alloc;
@ 400: store &preamble$263 preamble$262;
@ 401: let &bool = &preamble$263;
@ 402: let &int_add = alloc;
@ 403: let preamble$299 = def (preamble$264) {
    @ 404: let preamble$265 = 0;
    @ 405: let &preamble$266 = preamble$264[preamble$265];
    @ 406: let preamble$267 = get &preamble$266;
    @ 407: let preamble$268 = "*value";
    @ 408: let preamble$269 = preamble$267 haskey preamble$268;
    @ 409: let &preamble$270 = if preamble$269 then {
        @ 419: let &preamble$271 = preamble$267{preamble$268};
        @ 420: ifresult &preamble$271;

    } else {
        @ 410: let preamble$272 = "Object has no attribute *value";
        @ 411: let &preamble$273 = alloc;
        @ 412: store &preamble$273 preamble$272;
        @ 413: let preamble$274 = "*value";
        @ 414: let preamble$275 = {};
        @ 415: let preamble$276 = preamble$275{preamble$274 -> &preamble$273};
        @ 416: let &preamble$277 = alloc;
        @ 417: store &preamble$277 preamble$276;
        @ 418: raise &preamble$277;

    };
    @ 421: let preamble$278 = get &preamble$270;
    @ 422: let preamble$279 = 1;
    @ 423: let &preamble$280 = preamble$264[preamble$279];
    @ 424: let preamble$281 = get &preamble$280;
    @ 425: let preamble$282 = "*value";
    @ 426: let preamble$283 = preamble$281 haskey preamble$282;
    @ 427: let &preamble$284 = if preamble$283 then {
        @ 437: let &preamble$285 = preamble$281{preamble$282};
        @ 438: ifresult &preamble$285;

    } else {
        @ 428: let preamble$286 = "Object has no attribute *value";
        @ 429: let &preamble$287 = alloc;
        @ 430: store &preamble$287 preamble$286;
        @ 431: let preamble$288 = "*value";
        @ 432: let preamble$289 = {};
        @ 433: let preamble$290 = preamble$289{preamble$288 -> &preamble$287};
        @ 434: let &preamble$291 = alloc;
        @ 435: store &preamble$291 preamble$290;
        @ 436: raise &preamble$291;

    };
    @ 439: let preamble$292 = get &preamble$284;
    @ 440: let preamble$293 = preamble$278 int+ preamble$292;
    @ 441: let &preamble$294 = alloc;
    @ 442: store &preamble$294 preamble$293;
    @ 443: let preamble$295 = "*value";
    @ 444: let preamble$296 = {};
    @ 445: let preamble$297 = preamble$296{preamble$295 -> &preamble$294};
    @ 446: let &preamble$298 = alloc;
    @ 447: store &preamble$298 preamble$297;
    @ 448: return &preamble$298;

};
@ 449: store &int_add preamble$299;
@ 450: let &method_call = alloc;
@ 451: let preamble$330 = def (preamble$300) {
    @ 452: let preamble$301 = 0;
    @ 453: let &preamble$302 = preamble$300[preamble$301];
    @ 454: let preamble$303 = get &preamble$302;
    @ 455: let preamble$304 = "*value";
    @ 456: let preamble$305 = preamble$303 haskey preamble$304;
    @ 457: let &preamble$306 = if preamble$305 then {
        @ 467: let &preamble$307 = preamble$303{preamble$304};
        @ 468: ifresult &preamble$307;

    } else {
        @ 458: let preamble$308 = "Object has no attribute *value";
        @ 459: let &preamble$309 = alloc;
        @ 460: store &preamble$309 preamble$308;
        @ 461: let preamble$310 = "*value";
        @ 462: let preamble$311 = {};
        @ 463: let preamble$312 = preamble$311{preamble$310 -> &preamble$309};
        @ 464: let &preamble$313 = alloc;
        @ 465: store &preamble$313 preamble$312;
        @ 466: raise &preamble$313;

    };
    @ 469: let preamble$314 = get &preamble$306;
    @ 470: let preamble$315 = "*value";
    @ 471: let preamble$316 = preamble$314 haskey preamble$315;
    @ 472: let &preamble$317 = if preamble$316 then {
        @ 482: let &preamble$318 = preamble$314{preamble$315};
        @ 483: ifresult &preamble$318;

    } else {
        @ 473: let preamble$319 = "Object has no attribute *value";
        @ 474: let &preamble$320 = alloc;
        @ 475: store &preamble$320 preamble$319;
        @ 476: let preamble$321 = "*value";
        @ 477: let preamble$322 = {};
        @ 478: let preamble$323 = preamble$322{preamble$321 -> &preamble$320};
        @ 479: let &preamble$324 = alloc;
        @ 480: store &preamble$324 preamble$323;
        @ 481: raise &preamble$324;

    };
    @ 484: let preamble$325 = get &preamble$317;
    @ 485: let preamble$326 = 1;
    @ 486: let preamble$327 = None;
    @ 487: let preamble$328 = preamble$300[preamble$326:preamble$327];
    @ 488: let &preamble$329 = preamble$325(preamble$328);
    @ 489: return &preamble$329;

};
@ 490: store &method_call preamble$330;
@ 491: let preamble$331 = "*None";
@ 492: let preamble$332 = get &scope;
@ 493: let preamble$333 = preamble$332{preamble$331 -> &None};
@ 494: store &scope preamble$333;
@ 495: let preamble$334 = "True";
@ 496: let preamble$335 = get &scope;
@ 497: let preamble$336 = preamble$335{preamble$334 -> &True};
@ 498: store &scope preamble$336;
@ 499: let preamble$337 = "False";
@ 500: let preamble$338 = get &scope;
@ 501: let preamble$339 = preamble$338{preamble$337 -> &False};
@ 502: store &scope preamble$339;
@ 503: let preamble$340 = "bool";
@ 504: let preamble$341 = get &scope;
@ 505: let preamble$342 = preamble$341{preamble$340 -> &bool};
@ 506: store &scope preamble$342;
@ 507: let preamble$343 = "NameError";
@ 508: let preamble$344 = get &scope;
@ 509: let preamble$345 = preamble$344{preamble$343 -> &NameError};
@ 510: store &scope preamble$345;
@ 511: let preamble$346 = "TypeError";
@ 512: let preamble$347 = get &scope;
@ 513: let preamble$348 = preamble$347{preamble$346 -> &TypeError};
@ 514: store &scope preamble$348;
@ 515: let preamble$349 = "AttributeError";
@ 516: let preamble$350 = get &scope;
@ 517: let preamble$351 = preamble$350{preamble$349 -> &AttributeError};
@ 518: store &scope preamble$351;
@ 519: let preamble$352 = "ValueError";
@ 520: let preamble$353 = get &scope;
@ 521: let preamble$354 = preamble$353{preamble$352 -> &ValueError};
@ 522: store &scope preamble$354;
@ 523: let preamble$355 = "StopIteration";
@ 524: let preamble$356 = get &scope;
@ 525: let preamble$357 = preamble$356{preamble$355 -> &StopIteration};
@ 526: store &scope preamble$357;
@ 527: let lamia$0 = "lst";
@ 528: let &lamia$1 = get_from_scope(lamia$0);
@ 529: let lamia$2 = get &lamia$1;
@ 530: let lamia$3 = "__iter__";
@ 531: let lamia$4 = lamia$2 haskey lamia$3;
@ 532: let &lamia$5 = if lamia$4 then {
    @ 542: let &lamia$6 = lamia$2{lamia$3};
    @ 543: ifresult &lamia$6;

} else {
    @ 533: let lamia$7 = "Object has no attribute __iter__";
    @ 534: let &lamia$8 = alloc;
    @ 535: store &lamia$8 lamia$7;
    @ 536: let lamia$9 = "*value";
    @ 537: let lamia$10 = {};
    @ 538: let lamia$11 = lamia$10{lamia$9 -> &lamia$8};
    @ 539: let &lamia$12 = alloc;
    @ 540: store &lamia$12 lamia$11;
    @ 541: raise &lamia$12;

};
@ 544: let lamia$13 = get &lamia$5;
@ 545: let lamia$14 = isfunc lamia$13;
@ 546: let &lamia$15 = if lamia$14 then {
    @ 548: let lamia$16 = def (lamia$17) {
        @ 549: let lamia$18 = [&lamia$1];
        @ 550: let lamia$19 = lamia$18 || lamia$17;
        @ 551: let &lamia$20 = lamia$13(lamia$19);
        @ 552: return &lamia$20;

    };
    @ 553: let &lamia$21 = alloc;
    @ 554: store &lamia$21 lamia$16;
    @ 555: let lamia$22 = "*value";
    @ 556: let lamia$23 = {};
    @ 557: let lamia$24 = lamia$23{lamia$22 -> &lamia$21};
    @ 558: let &lamia$25 = alloc;
    @ 559: store &lamia$25 lamia$24;
    @ 560: ifresult &lamia$25;

} else {
    @ 547: ifresult &lamia$5;

};
@ 561: let lamia$26 = "$norm1";
@ 562: let lamia$27 = get &scope;
@ 563: let lamia$28 = lamia$27{lamia$26 -> &lamia$15};
@ 564: store &scope lamia$28;
@ 565: let lamia$29 = "$norm1";
@ 566: let &lamia$30 = get_from_scope(lamia$29);
@ 567: let &lamia$31 = &lamia$30;
@ 568: let lamia$33 = get &lamia$31;
@ 569: let lamia$35 = "*value";
@ 570: let lamia$36 = lamia$33 haskey lamia$35;
@ 571: let &lamia$37 = if lamia$36 then {
    @ 581: let &lamia$38 = lamia$33{lamia$35};
    @ 582: ifresult &lamia$38;

} else {
    @ 572: let lamia$39 = "Object has no attribute *value";
    @ 573: let &lamia$40 = alloc;
    @ 574: store &lamia$40 lamia$39;
    @ 575: let lamia$41 = "*value";
    @ 576: let lamia$42 = {};
    @ 577: let lamia$43 = lamia$42{lamia$41 -> &lamia$40};
    @ 578: let &lamia$44 = alloc;
    @ 579: store &lamia$44 lamia$43;
    @ 580: raise &lamia$44;

};
@ 583: let lamia$34 = get &lamia$37;
@ 584: let lamia$45 = isfunc lamia$34;
@ 585: let lamia$46 = not lamia$45;
@ 586: let &lamia$32 = alloc;
@ 587: store &lamia$32 lamia$46;
@ 588: while &lamia$32 {
    @ 589: let lamia$47 = "__call__";
    @ 590: let lamia$48 = lamia$33 haskey lamia$47;
    @ 591: let &lamia$49 = if lamia$48 then {
        @ 601: let &lamia$50 = lamia$33{lamia$47};
        @ 602: ifresult &lamia$50;

    } else {
        @ 592: let lamia$51 = "Object is not callable";
        @ 593: let &lamia$52 = alloc;
        @ 594: store &lamia$52 lamia$51;
        @ 595: let lamia$53 = "*value";
        @ 596: let lamia$54 = {};
        @ 597: let lamia$55 = lamia$54{lamia$53 -> &lamia$52};
        @ 598: let &lamia$56 = alloc;
        @ 599: store &lamia$56 lamia$55;
        @ 600: raise &lamia$56;

    };
    @ 603: let &lamia$31 = &lamia$49;
    @ 604: let lamia$33 = get &lamia$31;
    @ 605: let lamia$35 = "*value";
    @ 606: let lamia$36 = lamia$33 haskey lamia$35;
    @ 607: let &lamia$37 = if lamia$36 then {
        @ 617: let &lamia$38 = lamia$33{lamia$35};
        @ 618: ifresult &lamia$38;

    } else {
        @ 608: let lamia$39 = "Object has no attribute *value";
        @ 609: let &lamia$40 = alloc;
        @ 610: store &lamia$40 lamia$39;
        @ 611: let lamia$41 = "*value";
        @ 612: let lamia$42 = {};
        @ 613: let lamia$43 = lamia$42{lamia$41 -> &lamia$40};
        @ 614: let &lamia$44 = alloc;
        @ 615: store &lamia$44 lamia$43;
        @ 616: raise &lamia$44;

    };
    @ 619: let lamia$34 = get &lamia$37;
    @ 620: let lamia$45 = isfunc lamia$34;
    @ 621: let lamia$46 = not lamia$45;
    @ 622: let &lamia$32 = alloc;
    @ 623: store &lamia$32 lamia$46;

};
@ 624: let lamia$57 = [];
@ 625: let &lamia$58 = lamia$34(lamia$57);
@ 626: let lamia$59 = "$norm2";
@ 627: let lamia$60 = get &scope;
@ 628: let lamia$61 = lamia$60{lamia$59 -> &lamia$58};
@ 629: store &scope lamia$61;
@ 630: let lamia$62 = "$norm2";
@ 631: let &lamia$63 = get_from_scope(lamia$62);
@ 632: let lamia$64 = get &lamia$63;
@ 633: let lamia$65 = "next";
@ 634: let lamia$66 = lamia$64 haskey lamia$65;
@ 635: let &lamia$67 = if lamia$66 then {
    @ 645: let &lamia$68 = lamia$64{lamia$65};
    @ 646: ifresult &lamia$68;

} else {
    @ 636: let lamia$69 = "Object has no attribute next";
    @ 637: let &lamia$70 = alloc;
    @ 638: store &lamia$70 lamia$69;
    @ 639: let lamia$71 = "*value";
    @ 640: let lamia$72 = {};
    @ 641: let lamia$73 = lamia$72{lamia$71 -> &lamia$70};
    @ 642: let &lamia$74 = alloc;
    @ 643: store &lamia$74 lamia$73;
    @ 644: raise &lamia$74;

};
@ 647: let lamia$75 = get &lamia$67;
@ 648: let lamia$76 = isfunc lamia$75;
@ 649: let &lamia$77 = if lamia$76 then {
    @ 651: let lamia$78 = def (lamia$79) {
        @ 652: let lamia$80 = [&lamia$63];
        @ 653: let lamia$81 = lamia$80 || lamia$79;
        @ 654: let &lamia$82 = lamia$75(lamia$81);
        @ 655: return &lamia$82;

    };
    @ 656: let &lamia$83 = alloc;
    @ 657: store &lamia$83 lamia$78;
    @ 658: let lamia$84 = "*value";
    @ 659: let lamia$85 = {};
    @ 660: let lamia$86 = lamia$85{lamia$84 -> &lamia$83};
    @ 661: let &lamia$87 = alloc;
    @ 662: store &lamia$87 lamia$86;
    @ 663: ifresult &lamia$87;

} else {
    @ 650: ifresult &lamia$67;

};
@ 664: let lamia$88 = "$norm3";
@ 665: let lamia$89 = get &scope;
@ 666: let lamia$90 = lamia$89{lamia$88 -> &lamia$77};
@ 667: store &scope lamia$90;
@ 668: let lamia$91 = "$norm3";
@ 669: let &lamia$92 = get_from_scope(lamia$91);
@ 670: let lamia$93 = "$simp0";
@ 671: let lamia$94 = get &scope;
@ 672: let lamia$95 = lamia$94{lamia$93 -> &lamia$92};
@ 673: store &scope lamia$95;
@ 674: try {
    @ 815: let lamia$97 = "$norm9";
    @ 816: let lamia$98 = get &scope;
    @ 817: let lamia$99 = lamia$98{lamia$97 -> &bool};
    @ 818: store &scope lamia$99;
    @ 819: let lamia$100 = True;
    @ 820: let &lamia$101 = if lamia$100 then {
        @ 822: ifresult &True;

    } else {
        @ 821: ifresult &False;

    };
    @ 823: let lamia$102 = "$norm10";
    @ 824: let lamia$103 = get &scope;
    @ 825: let lamia$104 = lamia$103{lamia$102 -> &lamia$101};
    @ 826: store &scope lamia$104;
    @ 827: let lamia$105 = "$norm9";
    @ 828: let &lamia$106 = get_from_scope(lamia$105);
    @ 829: let lamia$107 = "$norm10";
    @ 830: let &lamia$108 = get_from_scope(lamia$107);
    @ 831: let &lamia$109 = &lamia$106;
    @ 832: let lamia$111 = get &lamia$109;
    @ 833: let lamia$113 = "*value";
    @ 834: let lamia$114 = lamia$111 haskey lamia$113;
    @ 835: let &lamia$115 = if lamia$114 then {
        @ 845: let &lamia$116 = lamia$111{lamia$113};
        @ 846: ifresult &lamia$116;

    } else {
        @ 836: let lamia$117 = "Object has no attribute *value";
        @ 837: let &lamia$118 = alloc;
        @ 838: store &lamia$118 lamia$117;
        @ 839: let lamia$119 = "*value";
        @ 840: let lamia$120 = {};
        @ 841: let lamia$121 = lamia$120{lamia$119 -> &lamia$118};
        @ 842: let &lamia$122 = alloc;
        @ 843: store &lamia$122 lamia$121;
        @ 844: raise &lamia$122;

    };
    @ 847: let lamia$112 = get &lamia$115;
    @ 848: let lamia$123 = isfunc lamia$112;
    @ 849: let lamia$124 = not lamia$123;
    @ 850: let &lamia$110 = alloc;
    @ 851: store &lamia$110 lamia$124;
    @ 852: while &lamia$110 {
        @ 853: let lamia$125 = "__call__";
        @ 854: let lamia$126 = lamia$111 haskey lamia$125;
        @ 855: let &lamia$127 = if lamia$126 then {
            @ 865: let &lamia$128 = lamia$111{lamia$125};
            @ 866: ifresult &lamia$128;

        } else {
            @ 856: let lamia$129 = "Object is not callable";
            @ 857: let &lamia$130 = alloc;
            @ 858: store &lamia$130 lamia$129;
            @ 859: let lamia$131 = "*value";
            @ 860: let lamia$132 = {};
            @ 861: let lamia$133 = lamia$132{lamia$131 -> &lamia$130};
            @ 862: let &lamia$134 = alloc;
            @ 863: store &lamia$134 lamia$133;
            @ 864: raise &lamia$134;

        };
        @ 867: let &lamia$109 = &lamia$127;
        @ 868: let lamia$111 = get &lamia$109;
        @ 869: let lamia$113 = "*value";
        @ 870: let lamia$114 = lamia$111 haskey lamia$113;
        @ 871: let &lamia$115 = if lamia$114 then {
            @ 881: let &lamia$116 = lamia$111{lamia$113};
            @ 882: ifresult &lamia$116;

        } else {
            @ 872: let lamia$117 = "Object has no attribute *value";
            @ 873: let &lamia$118 = alloc;
            @ 874: store &lamia$118 lamia$117;
            @ 875: let lamia$119 = "*value";
            @ 876: let lamia$120 = {};
            @ 877: let lamia$121 = lamia$120{lamia$119 -> &lamia$118};
            @ 878: let &lamia$122 = alloc;
            @ 879: store &lamia$122 lamia$121;
            @ 880: raise &lamia$122;

        };
        @ 883: let lamia$112 = get &lamia$115;
        @ 884: let lamia$123 = isfunc lamia$112;
        @ 885: let lamia$124 = not lamia$123;
        @ 886: let &lamia$110 = alloc;
        @ 887: store &lamia$110 lamia$124;

    };
    @ 888: let lamia$135 = [&lamia$108];
    @ 889: let &lamia$136 = lamia$112(lamia$135);
    @ 890: let lamia$137 = "$norm11";
    @ 891: let lamia$138 = get &scope;
    @ 892: let lamia$139 = lamia$138{lamia$137 -> &lamia$136};
    @ 893: store &scope lamia$139;
    @ 894: let lamia$140 = "$norm11";
    @ 895: let &lamia$141 = get_from_scope(lamia$140);
    @ 896: let lamia$142 = "$simp2";
    @ 897: let lamia$143 = get &scope;
    @ 898: let lamia$144 = lamia$143{lamia$142 -> &lamia$141};
    @ 899: store &scope lamia$144;
    @ 900: let &lamia$148 = alloc;
    @ 901: let lamia$145 = "$simp2";
    @ 902: let &lamia$146 = get_from_scope(lamia$145);
    @ 903: let lamia$147 = &lamia$146 is &True;
    @ 904: store &lamia$148 lamia$147;
    @ 905: while &lamia$148 {
        @ 906: let lamia$149 = "$simp0";
        @ 907: let &lamia$150 = get_from_scope(lamia$149);
        @ 908: let &lamia$151 = &lamia$150;
        @ 909: let lamia$153 = get &lamia$151;
        @ 910: let lamia$155 = "*value";
        @ 911: let lamia$156 = lamia$153 haskey lamia$155;
        @ 912: let &lamia$157 = if lamia$156 then {
            @ 922: let &lamia$158 = lamia$153{lamia$155};
            @ 923: ifresult &lamia$158;

        } else {
            @ 913: let lamia$159 = "Object has no attribute *value";
            @ 914: let &lamia$160 = alloc;
            @ 915: store &lamia$160 lamia$159;
            @ 916: let lamia$161 = "*value";
            @ 917: let lamia$162 = {};
            @ 918: let lamia$163 = lamia$162{lamia$161 -> &lamia$160};
            @ 919: let &lamia$164 = alloc;
            @ 920: store &lamia$164 lamia$163;
            @ 921: raise &lamia$164;

        };
        @ 924: let lamia$154 = get &lamia$157;
        @ 925: let lamia$165 = isfunc lamia$154;
        @ 926: let lamia$166 = not lamia$165;
        @ 927: let &lamia$152 = alloc;
        @ 928: store &lamia$152 lamia$166;
        @ 929: while &lamia$152 {
            @ 930: let lamia$167 = "__call__";
            @ 931: let lamia$168 = lamia$153 haskey lamia$167;
            @ 932: let &lamia$169 = if lamia$168 then {
                @ 942: let &lamia$170 = lamia$153{lamia$167};
                @ 943: ifresult &lamia$170;

            } else {
                @ 933: let lamia$171 = "Object is not callable";
                @ 934: let &lamia$172 = alloc;
                @ 935: store &lamia$172 lamia$171;
                @ 936: let lamia$173 = "*value";
                @ 937: let lamia$174 = {};
                @ 938: let lamia$175 = lamia$174{lamia$173 -> &lamia$172};
                @ 939: let &lamia$176 = alloc;
                @ 940: store &lamia$176 lamia$175;
                @ 941: raise &lamia$176;

            };
            @ 944: let &lamia$151 = &lamia$169;
            @ 945: let lamia$153 = get &lamia$151;
            @ 946: let lamia$155 = "*value";
            @ 947: let lamia$156 = lamia$153 haskey lamia$155;
            @ 948: let &lamia$157 = if lamia$156 then {
                @ 958: let &lamia$158 = lamia$153{lamia$155};
                @ 959: ifresult &lamia$158;

            } else {
                @ 949: let lamia$159 = "Object has no attribute *value";
                @ 950: let &lamia$160 = alloc;
                @ 951: store &lamia$160 lamia$159;
                @ 952: let lamia$161 = "*value";
                @ 953: let lamia$162 = {};
                @ 954: let lamia$163 = lamia$162{lamia$161 -> &lamia$160};
                @ 955: let &lamia$164 = alloc;
                @ 956: store &lamia$164 lamia$163;
                @ 957: raise &lamia$164;

            };
            @ 960: let lamia$154 = get &lamia$157;
            @ 961: let lamia$165 = isfunc lamia$154;
            @ 962: let lamia$166 = not lamia$165;
            @ 963: let &lamia$152 = alloc;
            @ 964: store &lamia$152 lamia$166;

        };
        @ 965: let lamia$177 = [];
        @ 966: let &lamia$178 = lamia$154(lamia$177);
        @ 967: let lamia$179 = "$norm12";
        @ 968: let lamia$180 = get &scope;
        @ 969: let lamia$181 = lamia$180{lamia$179 -> &lamia$178};
        @ 970: store &scope lamia$181;
        @ 971: let lamia$182 = "$norm12";
        @ 972: let &lamia$183 = get_from_scope(lamia$182);
        @ 973: let lamia$184 = "i";
        @ 974: let lamia$185 = get &scope;
        @ 975: let lamia$186 = lamia$185{lamia$184 -> &lamia$183};
        @ 976: store &scope lamia$186;
        @ 977: let lamia$187 = "i";
        @ 978: let &lamia$188 = get_from_scope(lamia$187);
        @ 979: let lamia$189 = "x";
        @ 980: let lamia$190 = get &scope;
        @ 981: let lamia$191 = lamia$190{lamia$189 -> &lamia$188};
        @ 982: store &scope lamia$191;
        @ 983: let lamia$192 = "$norm13";
        @ 984: let lamia$193 = get &scope;
        @ 985: let lamia$194 = lamia$193{lamia$192 -> &bool};
        @ 986: store &scope lamia$194;
        @ 987: let lamia$195 = True;
        @ 988: let &lamia$196 = if lamia$195 then {
            @ 990: ifresult &True;

        } else {
            @ 989: ifresult &False;

        };
        @ 991: let lamia$197 = "$norm14";
        @ 992: let lamia$198 = get &scope;
        @ 993: let lamia$199 = lamia$198{lamia$197 -> &lamia$196};
        @ 994: store &scope lamia$199;
        @ 995: let lamia$200 = "$norm13";
        @ 996: let &lamia$201 = get_from_scope(lamia$200);
        @ 997: let lamia$202 = "$norm14";
        @ 998: let &lamia$203 = get_from_scope(lamia$202);
        @ 999: let &lamia$204 = &lamia$201;
        @1000: let lamia$206 = get &lamia$204;
        @1001: let lamia$208 = "*value";
        @1002: let lamia$209 = lamia$206 haskey lamia$208;
        @1003: let &lamia$210 = if lamia$209 then {
            @1013: let &lamia$211 = lamia$206{lamia$208};
            @1014: ifresult &lamia$211;

        } else {
            @1004: let lamia$212 = "Object has no attribute *value";
            @1005: let &lamia$213 = alloc;
            @1006: store &lamia$213 lamia$212;
            @1007: let lamia$214 = "*value";
            @1008: let lamia$215 = {};
            @1009: let lamia$216 = lamia$215{lamia$214 -> &lamia$213};
            @1010: let &lamia$217 = alloc;
            @1011: store &lamia$217 lamia$216;
            @1012: raise &lamia$217;

        };
        @1015: let lamia$207 = get &lamia$210;
        @1016: let lamia$218 = isfunc lamia$207;
        @1017: let lamia$219 = not lamia$218;
        @1018: let &lamia$205 = alloc;
        @1019: store &lamia$205 lamia$219;
        @1020: while &lamia$205 {
            @1021: let lamia$220 = "__call__";
            @1022: let lamia$221 = lamia$206 haskey lamia$220;
            @1023: let &lamia$222 = if lamia$221 then {
                @1033: let &lamia$223 = lamia$206{lamia$220};
                @1034: ifresult &lamia$223;

            } else {
                @1024: let lamia$224 = "Object is not callable";
                @1025: let &lamia$225 = alloc;
                @1026: store &lamia$225 lamia$224;
                @1027: let lamia$226 = "*value";
                @1028: let lamia$227 = {};
                @1029: let lamia$228 = lamia$227{lamia$226 -> &lamia$225};
                @1030: let &lamia$229 = alloc;
                @1031: store &lamia$229 lamia$228;
                @1032: raise &lamia$229;

            };
            @1035: let &lamia$204 = &lamia$222;
            @1036: let lamia$206 = get &lamia$204;
            @1037: let lamia$208 = "*value";
            @1038: let lamia$209 = lamia$206 haskey lamia$208;
            @1039: let &lamia$210 = if lamia$209 then {
                @1049: let &lamia$211 = lamia$206{lamia$208};
                @1050: ifresult &lamia$211;

            } else {
                @1040: let lamia$212 = "Object has no attribute *value";
                @1041: let &lamia$213 = alloc;
                @1042: store &lamia$213 lamia$212;
                @1043: let lamia$214 = "*value";
                @1044: let lamia$215 = {};
                @1045: let lamia$216 = lamia$215{lamia$214 -> &lamia$213};
                @1046: let &lamia$217 = alloc;
                @1047: store &lamia$217 lamia$216;
                @1048: raise &lamia$217;

            };
            @1051: let lamia$207 = get &lamia$210;
            @1052: let lamia$218 = isfunc lamia$207;
            @1053: let lamia$219 = not lamia$218;
            @1054: let &lamia$205 = alloc;
            @1055: store &lamia$205 lamia$219;

        };
        @1056: let lamia$230 = [&lamia$203];
        @1057: let &lamia$231 = lamia$207(lamia$230);
        @1058: let lamia$232 = "$norm15";
        @1059: let lamia$233 = get &scope;
        @1060: let lamia$234 = lamia$233{lamia$232 -> &lamia$231};
        @1061: store &scope lamia$234;
        @1062: let lamia$235 = "$norm15";
        @1063: let &lamia$236 = get_from_scope(lamia$235);
        @1064: let lamia$237 = "$simp2";
        @1065: let lamia$238 = get &scope;
        @1066: let lamia$239 = lamia$238{lamia$237 -> &lamia$236};
        @1067: store &scope lamia$239;
        @1068: let lamia$145 = "$simp2";
        @1069: let &lamia$146 = get_from_scope(lamia$145);
        @1070: let lamia$147 = &lamia$146 is &True;
        @1071: store &lamia$148 lamia$147;

    };

} except &lamia$96 {
    @ 675: let lamia$240 = "$simp1";
    @ 676: let lamia$241 = get &scope;
    @ 677: let lamia$242 = lamia$241{lamia$240 -> &lamia$96};
    @ 678: store &scope lamia$242;
    @ 679: let lamia$243 = "$norm4";
    @ 680: let lamia$244 = get &scope;
    @ 681: let lamia$245 = lamia$244{lamia$243 -> &bool};
    @ 682: store &scope lamia$245;
    @ 683: let lamia$246 = "$simp1";
    @ 684: let &lamia$247 = get_from_scope(lamia$246);
    @ 685: let lamia$248 = get &lamia$247;
    @ 686: let lamia$249 = "__class__";
    @ 687: let lamia$250 = lamia$248 haskey lamia$249;
    @ 688: let &lamia$251 = if lamia$250 then {
        @ 698: let &lamia$252 = lamia$248{lamia$249};
        @ 699: ifresult &lamia$252;

    } else {
        @ 689: let lamia$253 = "Object has no attribute __class__";
        @ 690: let &lamia$254 = alloc;
        @ 691: store &lamia$254 lamia$253;
        @ 692: let lamia$255 = "*value";
        @ 693: let lamia$256 = {};
        @ 694: let lamia$257 = lamia$256{lamia$255 -> &lamia$254};
        @ 695: let &lamia$258 = alloc;
        @ 696: store &lamia$258 lamia$257;
        @ 697: raise &lamia$258;

    };
    @ 700: let lamia$259 = get &lamia$251;
    @ 701: let lamia$260 = isfunc lamia$259;
    @ 702: let &lamia$261 = if lamia$260 then {
        @ 704: let lamia$262 = def (lamia$263) {
            @ 705: let lamia$264 = [&lamia$247];
            @ 706: let lamia$265 = lamia$264 || lamia$263;
            @ 707: let &lamia$266 = lamia$259(lamia$265);
            @ 708: return &lamia$266;

        };
        @ 709: let &lamia$267 = alloc;
        @ 710: store &lamia$267 lamia$262;
        @ 711: let lamia$268 = "*value";
        @ 712: let lamia$269 = {};
        @ 713: let lamia$270 = lamia$269{lamia$268 -> &lamia$267};
        @ 714: let &lamia$271 = alloc;
        @ 715: store &lamia$271 lamia$270;
        @ 716: ifresult &lamia$271;

    } else {
        @ 703: ifresult &lamia$251;

    };
    @ 717: let lamia$272 = "$norm5";
    @ 718: let lamia$273 = get &scope;
    @ 719: let lamia$274 = lamia$273{lamia$272 -> &lamia$261};
    @ 720: store &scope lamia$274;
    @ 721: let lamia$275 = "$norm6";
    @ 722: let lamia$276 = get &scope;
    @ 723: let lamia$277 = lamia$276{lamia$275 -> &StopIteration};
    @ 724: store &scope lamia$277;
    @ 725: let lamia$278 = "$norm5";
    @ 726: let &lamia$279 = get_from_scope(lamia$278);
    @ 727: let lamia$280 = "$norm6";
    @ 728: let &lamia$281 = get_from_scope(lamia$280);
    @ 729: let lamia$282 = &lamia$279 is &lamia$281;
    @ 730: let &lamia$283 = if lamia$282 then {
        @ 732: ifresult &True;

    } else {
        @ 731: ifresult &False;

    };
    @ 733: let lamia$284 = "$norm7";
    @ 734: let lamia$285 = get &scope;
    @ 735: let lamia$286 = lamia$285{lamia$284 -> &lamia$283};
    @ 736: store &scope lamia$286;
    @ 737: let lamia$287 = "$norm4";
    @ 738: let &lamia$288 = get_from_scope(lamia$287);
    @ 739: let lamia$289 = "$norm7";
    @ 740: let &lamia$290 = get_from_scope(lamia$289);
    @ 741: let &lamia$291 = &lamia$288;
    @ 742: let lamia$293 = get &lamia$291;
    @ 743: let lamia$295 = "*value";
    @ 744: let lamia$296 = lamia$293 haskey lamia$295;
    @ 745: let &lamia$297 = if lamia$296 then {
        @ 755: let &lamia$298 = lamia$293{lamia$295};
        @ 756: ifresult &lamia$298;

    } else {
        @ 746: let lamia$299 = "Object has no attribute *value";
        @ 747: let &lamia$300 = alloc;
        @ 748: store &lamia$300 lamia$299;
        @ 749: let lamia$301 = "*value";
        @ 750: let lamia$302 = {};
        @ 751: let lamia$303 = lamia$302{lamia$301 -> &lamia$300};
        @ 752: let &lamia$304 = alloc;
        @ 753: store &lamia$304 lamia$303;
        @ 754: raise &lamia$304;

    };
    @ 757: let lamia$294 = get &lamia$297;
    @ 758: let lamia$305 = isfunc lamia$294;
    @ 759: let lamia$306 = not lamia$305;
    @ 760: let &lamia$292 = alloc;
    @ 761: store &lamia$292 lamia$306;
    @ 762: while &lamia$292 {
        @ 763: let lamia$307 = "__call__";
        @ 764: let lamia$308 = lamia$293 haskey lamia$307;
        @ 765: let &lamia$309 = if lamia$308 then {
            @ 775: let &lamia$310 = lamia$293{lamia$307};
            @ 776: ifresult &lamia$310;

        } else {
            @ 766: let lamia$311 = "Object is not callable";
            @ 767: let &lamia$312 = alloc;
            @ 768: store &lamia$312 lamia$311;
            @ 769: let lamia$313 = "*value";
            @ 770: let lamia$314 = {};
            @ 771: let lamia$315 = lamia$314{lamia$313 -> &lamia$312};
            @ 772: let &lamia$316 = alloc;
            @ 773: store &lamia$316 lamia$315;
            @ 774: raise &lamia$316;

        };
        @ 777: let &lamia$291 = &lamia$309;
        @ 778: let lamia$293 = get &lamia$291;
        @ 779: let lamia$295 = "*value";
        @ 780: let lamia$296 = lamia$293 haskey lamia$295;
        @ 781: let &lamia$297 = if lamia$296 then {
            @ 791: let &lamia$298 = lamia$293{lamia$295};
            @ 792: ifresult &lamia$298;

        } else {
            @ 782: let lamia$299 = "Object has no attribute *value";
            @ 783: let &lamia$300 = alloc;
            @ 784: store &lamia$300 lamia$299;
            @ 785: let lamia$301 = "*value";
            @ 786: let lamia$302 = {};
            @ 787: let lamia$303 = lamia$302{lamia$301 -> &lamia$300};
            @ 788: let &lamia$304 = alloc;
            @ 789: store &lamia$304 lamia$303;
            @ 790: raise &lamia$304;

        };
        @ 793: let lamia$294 = get &lamia$297;
        @ 794: let lamia$305 = isfunc lamia$294;
        @ 795: let lamia$306 = not lamia$305;
        @ 796: let &lamia$292 = alloc;
        @ 797: store &lamia$292 lamia$306;

    };
    @ 798: let lamia$317 = [&lamia$290];
    @ 799: let &lamia$318 = lamia$294(lamia$317);
    @ 800: let lamia$319 = "$norm8";
    @ 801: let lamia$320 = get &scope;
    @ 802: let lamia$321 = lamia$320{lamia$319 -> &lamia$318};
    @ 803: store &scope lamia$321;
    @ 804: let lamia$322 = "$norm8";
    @ 805: let &lamia$323 = get_from_scope(lamia$322);
    @ 806: let lamia$324 = &lamia$323 is &True;
    @ 807: let lamia$329 = if lamia$324 then {
        @ 813: let lamia$325 = None;
        @ 814: ifresult lamia$325;

    } else {
        @ 808: let lamia$326 = "$simp1";
        @ 809: let &lamia$327 = get_from_scope(lamia$326);
        @ 810: raise &lamia$327;
        @ 811: let lamia$328 = None;
        @ 812: ifresult lamia$328;

    };

};
